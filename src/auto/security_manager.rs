// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use webkit2_sys;

glib_wrapper! {
    pub struct SecurityManager(Object<webkit2_sys::WebKitSecurityManager, webkit2_sys::WebKitSecurityManagerClass, SecurityManagerClass>);

    match fn {
        get_type => || webkit2_sys::webkit_security_manager_get_type(),
    }
}

pub const NONE_SECURITY_MANAGER: Option<&SecurityManager> = None;

pub trait SecurityManagerExt: 'static {
    fn register_uri_scheme_as_cors_enabled(&self, scheme: &str);

    fn register_uri_scheme_as_display_isolated(&self, scheme: &str);

    fn register_uri_scheme_as_empty_document(&self, scheme: &str);

    fn register_uri_scheme_as_local(&self, scheme: &str);

    fn register_uri_scheme_as_no_access(&self, scheme: &str);

    fn register_uri_scheme_as_secure(&self, scheme: &str);

    fn uri_scheme_is_cors_enabled(&self, scheme: &str) -> bool;

    fn uri_scheme_is_display_isolated(&self, scheme: &str) -> bool;

    fn uri_scheme_is_empty_document(&self, scheme: &str) -> bool;

    fn uri_scheme_is_local(&self, scheme: &str) -> bool;

    fn uri_scheme_is_no_access(&self, scheme: &str) -> bool;

    fn uri_scheme_is_secure(&self, scheme: &str) -> bool;
}

impl<O: IsA<SecurityManager>> SecurityManagerExt for O {
    fn register_uri_scheme_as_cors_enabled(&self, scheme: &str) {
        unsafe {
            webkit2_sys::webkit_security_manager_register_uri_scheme_as_cors_enabled(self.as_ref().to_glib_none().0, scheme.to_glib_none().0);
        }
    }

    fn register_uri_scheme_as_display_isolated(&self, scheme: &str) {
        unsafe {
            webkit2_sys::webkit_security_manager_register_uri_scheme_as_display_isolated(self.as_ref().to_glib_none().0, scheme.to_glib_none().0);
        }
    }

    fn register_uri_scheme_as_empty_document(&self, scheme: &str) {
        unsafe {
            webkit2_sys::webkit_security_manager_register_uri_scheme_as_empty_document(self.as_ref().to_glib_none().0, scheme.to_glib_none().0);
        }
    }

    fn register_uri_scheme_as_local(&self, scheme: &str) {
        unsafe {
            webkit2_sys::webkit_security_manager_register_uri_scheme_as_local(self.as_ref().to_glib_none().0, scheme.to_glib_none().0);
        }
    }

    fn register_uri_scheme_as_no_access(&self, scheme: &str) {
        unsafe {
            webkit2_sys::webkit_security_manager_register_uri_scheme_as_no_access(self.as_ref().to_glib_none().0, scheme.to_glib_none().0);
        }
    }

    fn register_uri_scheme_as_secure(&self, scheme: &str) {
        unsafe {
            webkit2_sys::webkit_security_manager_register_uri_scheme_as_secure(self.as_ref().to_glib_none().0, scheme.to_glib_none().0);
        }
    }

    fn uri_scheme_is_cors_enabled(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_security_manager_uri_scheme_is_cors_enabled(self.as_ref().to_glib_none().0, scheme.to_glib_none().0))
        }
    }

    fn uri_scheme_is_display_isolated(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_security_manager_uri_scheme_is_display_isolated(self.as_ref().to_glib_none().0, scheme.to_glib_none().0))
        }
    }

    fn uri_scheme_is_empty_document(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_security_manager_uri_scheme_is_empty_document(self.as_ref().to_glib_none().0, scheme.to_glib_none().0))
        }
    }

    fn uri_scheme_is_local(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_security_manager_uri_scheme_is_local(self.as_ref().to_glib_none().0, scheme.to_glib_none().0))
        }
    }

    fn uri_scheme_is_no_access(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_security_manager_uri_scheme_is_no_access(self.as_ref().to_glib_none().0, scheme.to_glib_none().0))
        }
    }

    fn uri_scheme_is_secure(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_security_manager_uri_scheme_is_secure(self.as_ref().to_glib_none().0, scheme.to_glib_none().0))
        }
    }
}

impl fmt::Display for SecurityManager {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SecurityManager")
    }
}
