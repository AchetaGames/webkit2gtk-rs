// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v2_30", feature = "dox"))]
use glib;
#[cfg(any(feature = "v2_30", feature = "dox"))]
use glib::translate::*;
#[cfg(any(feature = "v2_30", feature = "dox"))]
use glib::GString;
use webkit2_sys;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct ITPFirstParty(Shared<webkit2_sys::WebKitITPFirstParty>);

    match fn {
        ref => |ptr| webkit2_sys::webkit_itp_first_party_ref(ptr),
        unref => |ptr| webkit2_sys::webkit_itp_first_party_unref(ptr),
        get_type => || webkit2_sys::webkit_itp_first_party_get_type(),
    }
}

impl ITPFirstParty {
    #[cfg(any(feature = "v2_30", feature = "dox"))]
    pub fn get_domain(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_itp_first_party_get_domain(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    pub fn get_last_update_time(&self) -> Option<glib::DateTime> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_itp_first_party_get_last_update_time(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    pub fn get_website_data_access_allowed(&self) -> bool {
        unsafe {
            from_glib(
                webkit2_sys::webkit_itp_first_party_get_website_data_access_allowed(
                    self.to_glib_none().0,
                ),
            )
        }
    }
}
