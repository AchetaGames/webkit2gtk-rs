// This file was generated by gir (e95e5d8) from gir-files (857b8f5)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct ColorChooserRequest(Object<ffi::WebKitColorChooserRequest>);

    match fn {
        get_type => || ffi::webkit_color_chooser_request_get_type(),
    }
}

pub trait ColorChooserRequestExt {
    #[cfg(feature = "v2_8")]
    fn cancel(&self);

    #[cfg(feature = "v2_8")]
    fn finish(&self);

    //#[cfg(feature = "v2_8")]
    //fn get_element_rectangle(&self, rect: /*Ignored*/gdk::Rectangle);

    //#[cfg(feature = "v2_8")]
    //fn get_rgba(&self, rgba: /*Ignored*/gdk::RGBA);

    //#[cfg(feature = "v2_8")]
    //fn set_rgba(&self, rgba: /*Ignored*/&gdk::RGBA);

    //fn get_property_rgba(&self) -> /*Ignored*/Option<gdk::RGBA>;

    //fn set_property_rgba(&self, rgba: /*Ignored*/Option<&gdk::RGBA>);

    #[cfg(feature = "v2_8")]
    fn connect_finished<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_rgba_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ColorChooserRequest> + IsA<glib::object::Object>> ColorChooserRequestExt for O {
    #[cfg(feature = "v2_8")]
    fn cancel(&self) {
        unsafe {
            ffi::webkit_color_chooser_request_cancel(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_8")]
    fn finish(&self) {
        unsafe {
            ffi::webkit_color_chooser_request_finish(self.to_glib_none().0);
        }
    }

    //#[cfg(feature = "v2_8")]
    //fn get_element_rectangle(&self, rect: /*Ignored*/gdk::Rectangle) {
    //    unsafe { TODO: call ffi::webkit_color_chooser_request_get_element_rectangle() }
    //}

    //#[cfg(feature = "v2_8")]
    //fn get_rgba(&self, rgba: /*Ignored*/gdk::RGBA) {
    //    unsafe { TODO: call ffi::webkit_color_chooser_request_get_rgba() }
    //}

    //#[cfg(feature = "v2_8")]
    //fn set_rgba(&self, rgba: /*Ignored*/&gdk::RGBA) {
    //    unsafe { TODO: call ffi::webkit_color_chooser_request_set_rgba() }
    //}

    //fn get_property_rgba(&self) -> /*Ignored*/Option<gdk::RGBA> {
    //    let mut value = Value::from(None::<&/*Ignored*/gdk::RGBA>);
    //    unsafe {
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "rgba".to_glib_none().0, value.to_glib_none_mut().0);
    //    }
    //    value.get()
    //}

    //fn set_property_rgba(&self, rgba: /*Ignored*/Option<&gdk::RGBA>) {
    //    unsafe {
    //        gobject_ffi::g_object_set_property(self.to_glib_none().0, "rgba".to_glib_none().0, Value::from(rgba).to_glib_none().0);
    //    }
    //}

    #[cfg(feature = "v2_8")]
    fn connect_finished<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "finished",
                transmute(finished_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_rgba_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::rgba",
                transmute(notify_rgba_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(feature = "v2_8")]
unsafe extern "C" fn finished_trampoline<P>(this: *mut ffi::WebKitColorChooserRequest, f: glib_ffi::gpointer)
where P: IsA<ColorChooserRequest> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&ColorChooserRequest::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_rgba_trampoline<P>(this: *mut ffi::WebKitColorChooserRequest, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<ColorChooserRequest> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&ColorChooserRequest::from_glib_borrow(this).downcast_unchecked())
}
