// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use gdk;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct ColorChooserRequest(Object<ffi::WebKitColorChooserRequest, ffi::WebKitColorChooserRequestClass, ColorChooserRequestClass>);

    match fn {
        get_type => || ffi::webkit_color_chooser_request_get_type(),
    }
}

pub const NONE_COLOR_CHOOSER_REQUEST: Option<&ColorChooserRequest> = None;

pub trait ColorChooserRequestExt: 'static {
    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn cancel(&self);

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn finish(&self);

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_element_rectangle(&self) -> gdk::Rectangle;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_rgba(&self) -> gdk::RGBA;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn set_rgba(&self, rgba: &gdk::RGBA);

    fn get_property_rgba(&self) -> Option<gdk::RGBA>;

    fn set_property_rgba(&self, rgba: Option<&gdk::RGBA>);

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_finished<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_rgba_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ColorChooserRequest>> ColorChooserRequestExt for O {
    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn cancel(&self) {
        unsafe {
            ffi::webkit_color_chooser_request_cancel(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn finish(&self) {
        unsafe {
            ffi::webkit_color_chooser_request_finish(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_element_rectangle(&self) -> gdk::Rectangle {
        unsafe {
            let mut rect = gdk::Rectangle::uninitialized();
            ffi::webkit_color_chooser_request_get_element_rectangle(self.as_ref().to_glib_none().0, rect.to_glib_none_mut().0);
            rect
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_rgba(&self) -> gdk::RGBA {
        unsafe {
            let mut rgba = gdk::RGBA::uninitialized();
            ffi::webkit_color_chooser_request_get_rgba(self.as_ref().to_glib_none().0, rgba.to_glib_none_mut().0);
            rgba
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn set_rgba(&self, rgba: &gdk::RGBA) {
        unsafe {
            ffi::webkit_color_chooser_request_set_rgba(self.as_ref().to_glib_none().0, rgba.to_glib_none().0);
        }
    }

    fn get_property_rgba(&self) -> Option<gdk::RGBA> {
        unsafe {
            let mut value = Value::from_type(<gdk::RGBA as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"rgba\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_rgba(&self, rgba: Option<&gdk::RGBA>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"rgba\0".as_ptr() as *const _, Value::from(rgba).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_finished<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"finished\0".as_ptr() as *const _,
                Some(transmute(finished_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_rgba_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::rgba\0".as_ptr() as *const _,
                Some(transmute(notify_rgba_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

#[cfg(any(feature = "v2_8", feature = "dox"))]
unsafe extern "C" fn finished_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::WebKitColorChooserRequest, f: glib_ffi::gpointer)
where P: IsA<ColorChooserRequest> {
    let f: &F = &*(f as *const F);
    f(&ColorChooserRequest::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_rgba_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::WebKitColorChooserRequest, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<ColorChooserRequest> {
    let f: &F = &*(f as *const F);
    f(&ColorChooserRequest::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for ColorChooserRequest {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ColorChooserRequest")
    }
}
