// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v2_16", feature = "dox"))]
use gio;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use gio_sys;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use glib;
use glib::object::IsA;
use glib::translate::*;
#[cfg(any(feature = "v2_10", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use glib::StaticType;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use glib::Value;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use glib_sys;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use gobject_sys;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use std::pin::Pin;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use std::ptr;
use webkit2_sys;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use CookieManager;
#[cfg(any(feature = "v2_30", feature = "dox"))]
use ITPThirdParty;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use WebsiteData;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use WebsiteDataTypes;

glib_wrapper! {
    pub struct WebsiteDataManager(Object<webkit2_sys::WebKitWebsiteDataManager, webkit2_sys::WebKitWebsiteDataManagerClass, WebsiteDataManagerClass>);

    match fn {
        get_type => || webkit2_sys::webkit_website_data_manager_get_type(),
    }
}

impl WebsiteDataManager {
    //#[cfg(any(feature = "v2_10", feature = "dox"))]
    //pub fn new(first_option_name: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> WebsiteDataManager {
    //    unsafe { TODO: call webkit2_sys:webkit_website_data_manager_new() }
    //}

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    pub fn new_ephemeral() -> WebsiteDataManager {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(webkit2_sys::webkit_website_data_manager_new_ephemeral()) }
    }
}

pub const NONE_WEBSITE_DATA_MANAGER: Option<&WebsiteDataManager> = None;

pub trait WebsiteDataManagerExt: 'static {
    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn clear<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, types: WebsiteDataTypes, timespan: /*Ignored*/glib::TimeSpan, cancellable: Option<&P>, callback: Q);

    //
    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn clear_future(&self, types: WebsiteDataTypes, timespan: /*Ignored*/glib::TimeSpan) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn fetch<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<Vec<WebsiteData>, glib::Error>) + Send + 'static,
    >(
        &self,
        types: WebsiteDataTypes,
        cancellable: Option<&P>,
        callback: Q,
    );

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn fetch_future(
        &self,
        types: WebsiteDataTypes,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<Vec<WebsiteData>, glib::Error>> + 'static>>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_base_cache_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_base_data_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_cookie_manager(&self) -> Option<CookieManager>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_disk_cache_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_dom_cache_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn get_hsts_cache_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_indexeddb_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_itp_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_itp_enabled(&self) -> bool;

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_itp_summary<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<Vec<ITPThirdParty>, glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    );

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_itp_summary_future(
        &self,
    ) -> Pin<
        Box_<dyn std::future::Future<Output = Result<Vec<ITPThirdParty>, glib::Error>> + 'static>,
    >;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_local_storage_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_offline_application_cache_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_persistent_credential_storage_enabled(&self) -> bool;

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_service_worker_registrations_directory(&self) -> Option<GString>;

    #[cfg_attr(feature = "v2_24", deprecated)]
    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_websql_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn is_ephemeral(&self) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn remove<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        types: WebsiteDataTypes,
        cancellable: Option<&P>,
        callback: Q,
    );

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn remove_future(
        &self,
        types: WebsiteDataTypes,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn set_itp_enabled(&self, enabled: bool);

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn set_persistent_credential_storage_enabled(&self, enabled: bool);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_property_is_ephemeral(&self) -> bool;
}

impl<O: IsA<WebsiteDataManager>> WebsiteDataManagerExt for O {
    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn clear<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, types: WebsiteDataTypes, timespan: /*Ignored*/glib::TimeSpan, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call webkit2_sys:webkit_website_data_manager_clear() }
    //}

    //
    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn clear_future(&self, types: WebsiteDataTypes, timespan: /*Ignored*/glib::TimeSpan) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

    //Box_::pin(gio::GioFuture::new(self, move |obj, send| {
    //    let cancellable = gio::Cancellable::new();
    //    obj.clear(
    //        types,
    //        timespan,
    //        Some(&cancellable),
    //        move |res| {
    //            send.resolve(res);
    //        },
    //    );

    //    cancellable
    //}))
    //}

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn fetch<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<Vec<WebsiteData>, glib::Error>) + Send + 'static,
    >(
        &self,
        types: WebsiteDataTypes,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn fetch_trampoline<
            Q: FnOnce(Result<Vec<WebsiteData>, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = webkit2_sys::webkit_website_data_manager_fetch_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(FromGlibPtrContainer::from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = fetch_trampoline::<Q>;
        unsafe {
            webkit2_sys::webkit_website_data_manager_fetch(
                self.as_ref().to_glib_none().0,
                types.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn fetch_future(
        &self,
        types: WebsiteDataTypes,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<Vec<WebsiteData>, glib::Error>> + 'static>>
    {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.fetch(types, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_base_cache_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(
                webkit2_sys::webkit_website_data_manager_get_base_cache_directory(
                    self.as_ref().to_glib_none().0,
                ),
            )
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_base_data_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(
                webkit2_sys::webkit_website_data_manager_get_base_data_directory(
                    self.as_ref().to_glib_none().0,
                ),
            )
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_cookie_manager(&self) -> Option<CookieManager> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_website_data_manager_get_cookie_manager(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_disk_cache_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(
                webkit2_sys::webkit_website_data_manager_get_disk_cache_directory(
                    self.as_ref().to_glib_none().0,
                ),
            )
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_dom_cache_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(
                webkit2_sys::webkit_website_data_manager_get_dom_cache_directory(
                    self.as_ref().to_glib_none().0,
                ),
            )
        }
    }

    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn get_hsts_cache_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(
                webkit2_sys::webkit_website_data_manager_get_hsts_cache_directory(
                    self.as_ref().to_glib_none().0,
                ),
            )
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_indexeddb_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(
                webkit2_sys::webkit_website_data_manager_get_indexeddb_directory(
                    self.as_ref().to_glib_none().0,
                ),
            )
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_itp_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_website_data_manager_get_itp_directory(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_itp_enabled(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_website_data_manager_get_itp_enabled(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_itp_summary<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<Vec<ITPThirdParty>, glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn get_itp_summary_trampoline<
            Q: FnOnce(Result<Vec<ITPThirdParty>, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = webkit2_sys::webkit_website_data_manager_get_itp_summary_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(FromGlibPtrContainer::from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = get_itp_summary_trampoline::<Q>;
        unsafe {
            webkit2_sys::webkit_website_data_manager_get_itp_summary(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_itp_summary_future(
        &self,
    ) -> Pin<
        Box_<dyn std::future::Future<Output = Result<Vec<ITPThirdParty>, glib::Error>> + 'static>,
    > {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.get_itp_summary(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_local_storage_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(
                webkit2_sys::webkit_website_data_manager_get_local_storage_directory(
                    self.as_ref().to_glib_none().0,
                ),
            )
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_offline_application_cache_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(
                webkit2_sys::webkit_website_data_manager_get_offline_application_cache_directory(
                    self.as_ref().to_glib_none().0,
                ),
            )
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_persistent_credential_storage_enabled(&self) -> bool {
        unsafe {
            from_glib(
                webkit2_sys::webkit_website_data_manager_get_persistent_credential_storage_enabled(
                    self.as_ref().to_glib_none().0,
                ),
            )
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_service_worker_registrations_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(
                webkit2_sys::webkit_website_data_manager_get_service_worker_registrations_directory(
                    self.as_ref().to_glib_none().0,
                ),
            )
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_websql_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(
                webkit2_sys::webkit_website_data_manager_get_websql_directory(
                    self.as_ref().to_glib_none().0,
                ),
            )
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn is_ephemeral(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_website_data_manager_is_ephemeral(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn remove<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        types: WebsiteDataTypes,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn remove_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut gobject_sys::GObject,
            res: *mut gio_sys::GAsyncResult,
            user_data: glib_sys::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = webkit2_sys::webkit_website_data_manager_remove_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = remove_trampoline::<Q>;
        unsafe {
            webkit2_sys::webkit_website_data_manager_remove(
                self.as_ref().to_glib_none().0,
                types.to_glib(),
                website_data.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn remove_future(
        &self,
        types: WebsiteDataTypes,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.remove(types, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn set_itp_enabled(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_website_data_manager_set_itp_enabled(
                self.as_ref().to_glib_none().0,
                enabled.to_glib(),
            );
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn set_persistent_credential_storage_enabled(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_website_data_manager_set_persistent_credential_storage_enabled(
                self.as_ref().to_glib_none().0,
                enabled.to_glib(),
            );
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_property_is_ephemeral(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"is-ephemeral\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `is-ephemeral` getter")
                .unwrap()
        }
    }
}

impl fmt::Display for WebsiteDataManager {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "WebsiteDataManager")
    }
}
