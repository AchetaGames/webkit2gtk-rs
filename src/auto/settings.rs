// This file was generated by gir (f00d658) from gir-files (1069259)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct Settings(Object<ffi::WebKitSettings>);

    match fn {
        get_type => || ffi::webkit_settings_get_type(),
    }
}

impl Settings {
    pub fn new() -> Settings {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::webkit_settings_new())
        }
    }

    //pub fn new_with_settings(first_setting_name: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> Settings {
    //    unsafe { TODO: call ffi::webkit_settings_new_with_settings() }
    //}
}

pub trait SettingsExt {
    #[cfg(feature = "v2_10")]
    fn get_allow_file_access_from_file_urls(&self) -> bool;

    fn get_allow_modal_dialogs(&self) -> bool;

    #[cfg(feature = "v2_14")]
    fn get_allow_universal_access_from_file_urls(&self) -> bool;

    fn get_auto_load_images(&self) -> bool;

    fn get_cursive_font_family(&self) -> Option<String>;

    fn get_default_charset(&self) -> Option<String>;

    fn get_default_font_family(&self) -> Option<String>;

    fn get_default_font_size(&self) -> u32;

    fn get_default_monospace_font_size(&self) -> u32;

    fn get_draw_compositing_indicators(&self) -> bool;

    #[cfg(feature = "v2_2")]
    fn get_enable_accelerated_2d_canvas(&self) -> bool;

    fn get_enable_caret_browsing(&self) -> bool;

    fn get_enable_developer_extras(&self) -> bool;

    fn get_enable_dns_prefetching(&self) -> bool;

    fn get_enable_frame_flattening(&self) -> bool;

    fn get_enable_fullscreen(&self) -> bool;

    fn get_enable_html5_database(&self) -> bool;

    fn get_enable_html5_local_storage(&self) -> bool;

    fn get_enable_hyperlink_auditing(&self) -> bool;

    fn get_enable_java(&self) -> bool;

    fn get_enable_javascript(&self) -> bool;

    #[cfg(feature = "v2_4")]
    fn get_enable_media_stream(&self) -> bool;

    #[cfg(feature = "v2_4")]
    fn get_enable_mediasource(&self) -> bool;

    fn get_enable_offline_web_application_cache(&self) -> bool;

    fn get_enable_page_cache(&self) -> bool;

    fn get_enable_plugins(&self) -> bool;

    fn get_enable_private_browsing(&self) -> bool;

    fn get_enable_resizable_text_areas(&self) -> bool;

    fn get_enable_site_specific_quirks(&self) -> bool;

    fn get_enable_smooth_scrolling(&self) -> bool;

    #[cfg(feature = "v2_2")]
    fn get_enable_spatial_navigation(&self) -> bool;

    fn get_enable_tabs_to_links(&self) -> bool;

    fn get_enable_webaudio(&self) -> bool;

    fn get_enable_webgl(&self) -> bool;

    #[cfg(feature = "v2_2")]
    fn get_enable_write_console_messages_to_stdout(&self) -> bool;

    fn get_enable_xss_auditor(&self) -> bool;

    fn get_fantasy_font_family(&self) -> Option<String>;

    //#[cfg(feature = "v2_16")]
    //fn get_hardware_acceleration_policy(&self) -> /*Ignored*/HardwareAccelerationPolicy;

    fn get_javascript_can_access_clipboard(&self) -> bool;

    fn get_javascript_can_open_windows_automatically(&self) -> bool;

    fn get_load_icons_ignoring_image_load_setting(&self) -> bool;

    fn get_media_playback_allows_inline(&self) -> bool;

    fn get_media_playback_requires_user_gesture(&self) -> bool;

    fn get_minimum_font_size(&self) -> u32;

    fn get_monospace_font_family(&self) -> Option<String>;

    fn get_pictograph_font_family(&self) -> Option<String>;

    fn get_print_backgrounds(&self) -> bool;

    fn get_sans_serif_font_family(&self) -> Option<String>;

    fn get_serif_font_family(&self) -> Option<String>;

    fn get_user_agent(&self) -> Option<String>;

    fn get_zoom_text_only(&self) -> bool;

    #[cfg(feature = "v2_10")]
    fn set_allow_file_access_from_file_urls(&self, allowed: bool);

    fn set_allow_modal_dialogs(&self, allowed: bool);

    #[cfg(feature = "v2_14")]
    fn set_allow_universal_access_from_file_urls(&self, allowed: bool);

    fn set_auto_load_images(&self, enabled: bool);

    fn set_cursive_font_family(&self, cursive_font_family: &str);

    fn set_default_charset(&self, default_charset: &str);

    fn set_default_font_family(&self, default_font_family: &str);

    fn set_default_font_size(&self, font_size: u32);

    fn set_default_monospace_font_size(&self, font_size: u32);

    fn set_draw_compositing_indicators(&self, enabled: bool);

    #[cfg(feature = "v2_2")]
    fn set_enable_accelerated_2d_canvas(&self, enabled: bool);

    fn set_enable_caret_browsing(&self, enabled: bool);

    fn set_enable_developer_extras(&self, enabled: bool);

    fn set_enable_dns_prefetching(&self, enabled: bool);

    fn set_enable_frame_flattening(&self, enabled: bool);

    fn set_enable_fullscreen(&self, enabled: bool);

    fn set_enable_html5_database(&self, enabled: bool);

    fn set_enable_html5_local_storage(&self, enabled: bool);

    fn set_enable_hyperlink_auditing(&self, enabled: bool);

    fn set_enable_java(&self, enabled: bool);

    fn set_enable_javascript(&self, enabled: bool);

    #[cfg(feature = "v2_4")]
    fn set_enable_media_stream(&self, enabled: bool);

    #[cfg(feature = "v2_4")]
    fn set_enable_mediasource(&self, enabled: bool);

    fn set_enable_offline_web_application_cache(&self, enabled: bool);

    fn set_enable_page_cache(&self, enabled: bool);

    fn set_enable_plugins(&self, enabled: bool);

    fn set_enable_private_browsing(&self, enabled: bool);

    fn set_enable_resizable_text_areas(&self, enabled: bool);

    fn set_enable_site_specific_quirks(&self, enabled: bool);

    fn set_enable_smooth_scrolling(&self, enabled: bool);

    #[cfg(feature = "v2_2")]
    fn set_enable_spatial_navigation(&self, enabled: bool);

    fn set_enable_tabs_to_links(&self, enabled: bool);

    fn set_enable_webaudio(&self, enabled: bool);

    fn set_enable_webgl(&self, enabled: bool);

    #[cfg(feature = "v2_2")]
    fn set_enable_write_console_messages_to_stdout(&self, enabled: bool);

    fn set_enable_xss_auditor(&self, enabled: bool);

    fn set_fantasy_font_family(&self, fantasy_font_family: &str);

    //#[cfg(feature = "v2_16")]
    //fn set_hardware_acceleration_policy(&self, policy: /*Ignored*/HardwareAccelerationPolicy);

    fn set_javascript_can_access_clipboard(&self, enabled: bool);

    fn set_javascript_can_open_windows_automatically(&self, enabled: bool);

    fn set_load_icons_ignoring_image_load_setting(&self, enabled: bool);

    fn set_media_playback_allows_inline(&self, enabled: bool);

    fn set_media_playback_requires_user_gesture(&self, enabled: bool);

    fn set_minimum_font_size(&self, font_size: u32);

    fn set_monospace_font_family(&self, monospace_font_family: &str);

    fn set_pictograph_font_family(&self, pictograph_font_family: &str);

    fn set_print_backgrounds(&self, print_backgrounds: bool);

    fn set_sans_serif_font_family(&self, sans_serif_font_family: &str);

    fn set_serif_font_family(&self, serif_font_family: &str);

    fn set_user_agent<'a, P: Into<Option<&'a str>>>(&self, user_agent: P);

    fn set_user_agent_with_application_details<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>>(&self, application_name: P, application_version: Q);

    fn set_zoom_text_only(&self, zoom_text_only: bool);
}

impl<O: IsA<Settings>> SettingsExt for O {
    #[cfg(feature = "v2_10")]
    fn get_allow_file_access_from_file_urls(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_allow_file_access_from_file_urls(self.to_glib_none().0))
        }
    }

    fn get_allow_modal_dialogs(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_allow_modal_dialogs(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_14")]
    fn get_allow_universal_access_from_file_urls(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_allow_universal_access_from_file_urls(self.to_glib_none().0))
        }
    }

    fn get_auto_load_images(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_auto_load_images(self.to_glib_none().0))
        }
    }

    fn get_cursive_font_family(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_settings_get_cursive_font_family(self.to_glib_none().0))
        }
    }

    fn get_default_charset(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_settings_get_default_charset(self.to_glib_none().0))
        }
    }

    fn get_default_font_family(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_settings_get_default_font_family(self.to_glib_none().0))
        }
    }

    fn get_default_font_size(&self) -> u32 {
        unsafe {
            ffi::webkit_settings_get_default_font_size(self.to_glib_none().0)
        }
    }

    fn get_default_monospace_font_size(&self) -> u32 {
        unsafe {
            ffi::webkit_settings_get_default_monospace_font_size(self.to_glib_none().0)
        }
    }

    fn get_draw_compositing_indicators(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_draw_compositing_indicators(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_2")]
    fn get_enable_accelerated_2d_canvas(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_accelerated_2d_canvas(self.to_glib_none().0))
        }
    }

    fn get_enable_caret_browsing(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_caret_browsing(self.to_glib_none().0))
        }
    }

    fn get_enable_developer_extras(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_developer_extras(self.to_glib_none().0))
        }
    }

    fn get_enable_dns_prefetching(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_dns_prefetching(self.to_glib_none().0))
        }
    }

    fn get_enable_frame_flattening(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_frame_flattening(self.to_glib_none().0))
        }
    }

    fn get_enable_fullscreen(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_fullscreen(self.to_glib_none().0))
        }
    }

    fn get_enable_html5_database(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_html5_database(self.to_glib_none().0))
        }
    }

    fn get_enable_html5_local_storage(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_html5_local_storage(self.to_glib_none().0))
        }
    }

    fn get_enable_hyperlink_auditing(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_hyperlink_auditing(self.to_glib_none().0))
        }
    }

    fn get_enable_java(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_java(self.to_glib_none().0))
        }
    }

    fn get_enable_javascript(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_javascript(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_4")]
    fn get_enable_media_stream(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_media_stream(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_4")]
    fn get_enable_mediasource(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_mediasource(self.to_glib_none().0))
        }
    }

    fn get_enable_offline_web_application_cache(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_offline_web_application_cache(self.to_glib_none().0))
        }
    }

    fn get_enable_page_cache(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_page_cache(self.to_glib_none().0))
        }
    }

    fn get_enable_plugins(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_plugins(self.to_glib_none().0))
        }
    }

    fn get_enable_private_browsing(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_private_browsing(self.to_glib_none().0))
        }
    }

    fn get_enable_resizable_text_areas(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_resizable_text_areas(self.to_glib_none().0))
        }
    }

    fn get_enable_site_specific_quirks(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_site_specific_quirks(self.to_glib_none().0))
        }
    }

    fn get_enable_smooth_scrolling(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_smooth_scrolling(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_2")]
    fn get_enable_spatial_navigation(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_spatial_navigation(self.to_glib_none().0))
        }
    }

    fn get_enable_tabs_to_links(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_tabs_to_links(self.to_glib_none().0))
        }
    }

    fn get_enable_webaudio(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_webaudio(self.to_glib_none().0))
        }
    }

    fn get_enable_webgl(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_webgl(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_2")]
    fn get_enable_write_console_messages_to_stdout(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_write_console_messages_to_stdout(self.to_glib_none().0))
        }
    }

    fn get_enable_xss_auditor(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_enable_xss_auditor(self.to_glib_none().0))
        }
    }

    fn get_fantasy_font_family(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_settings_get_fantasy_font_family(self.to_glib_none().0))
        }
    }

    //#[cfg(feature = "v2_16")]
    //fn get_hardware_acceleration_policy(&self) -> /*Ignored*/HardwareAccelerationPolicy {
    //    unsafe { TODO: call ffi::webkit_settings_get_hardware_acceleration_policy() }
    //}

    fn get_javascript_can_access_clipboard(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_javascript_can_access_clipboard(self.to_glib_none().0))
        }
    }

    fn get_javascript_can_open_windows_automatically(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_javascript_can_open_windows_automatically(self.to_glib_none().0))
        }
    }

    fn get_load_icons_ignoring_image_load_setting(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_load_icons_ignoring_image_load_setting(self.to_glib_none().0))
        }
    }

    fn get_media_playback_allows_inline(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_media_playback_allows_inline(self.to_glib_none().0))
        }
    }

    fn get_media_playback_requires_user_gesture(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_media_playback_requires_user_gesture(self.to_glib_none().0))
        }
    }

    fn get_minimum_font_size(&self) -> u32 {
        unsafe {
            ffi::webkit_settings_get_minimum_font_size(self.to_glib_none().0)
        }
    }

    fn get_monospace_font_family(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_settings_get_monospace_font_family(self.to_glib_none().0))
        }
    }

    fn get_pictograph_font_family(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_settings_get_pictograph_font_family(self.to_glib_none().0))
        }
    }

    fn get_print_backgrounds(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_print_backgrounds(self.to_glib_none().0))
        }
    }

    fn get_sans_serif_font_family(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_settings_get_sans_serif_font_family(self.to_glib_none().0))
        }
    }

    fn get_serif_font_family(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_settings_get_serif_font_family(self.to_glib_none().0))
        }
    }

    fn get_user_agent(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_settings_get_user_agent(self.to_glib_none().0))
        }
    }

    fn get_zoom_text_only(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_settings_get_zoom_text_only(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_10")]
    fn set_allow_file_access_from_file_urls(&self, allowed: bool) {
        unsafe {
            ffi::webkit_settings_set_allow_file_access_from_file_urls(self.to_glib_none().0, allowed.to_glib());
        }
    }

    fn set_allow_modal_dialogs(&self, allowed: bool) {
        unsafe {
            ffi::webkit_settings_set_allow_modal_dialogs(self.to_glib_none().0, allowed.to_glib());
        }
    }

    #[cfg(feature = "v2_14")]
    fn set_allow_universal_access_from_file_urls(&self, allowed: bool) {
        unsafe {
            ffi::webkit_settings_set_allow_universal_access_from_file_urls(self.to_glib_none().0, allowed.to_glib());
        }
    }

    fn set_auto_load_images(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_auto_load_images(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_cursive_font_family(&self, cursive_font_family: &str) {
        unsafe {
            ffi::webkit_settings_set_cursive_font_family(self.to_glib_none().0, cursive_font_family.to_glib_none().0);
        }
    }

    fn set_default_charset(&self, default_charset: &str) {
        unsafe {
            ffi::webkit_settings_set_default_charset(self.to_glib_none().0, default_charset.to_glib_none().0);
        }
    }

    fn set_default_font_family(&self, default_font_family: &str) {
        unsafe {
            ffi::webkit_settings_set_default_font_family(self.to_glib_none().0, default_font_family.to_glib_none().0);
        }
    }

    fn set_default_font_size(&self, font_size: u32) {
        unsafe {
            ffi::webkit_settings_set_default_font_size(self.to_glib_none().0, font_size);
        }
    }

    fn set_default_monospace_font_size(&self, font_size: u32) {
        unsafe {
            ffi::webkit_settings_set_default_monospace_font_size(self.to_glib_none().0, font_size);
        }
    }

    fn set_draw_compositing_indicators(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_draw_compositing_indicators(self.to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(feature = "v2_2")]
    fn set_enable_accelerated_2d_canvas(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_accelerated_2d_canvas(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_caret_browsing(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_caret_browsing(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_developer_extras(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_developer_extras(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_dns_prefetching(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_dns_prefetching(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_frame_flattening(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_frame_flattening(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_fullscreen(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_fullscreen(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_html5_database(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_html5_database(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_html5_local_storage(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_html5_local_storage(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_hyperlink_auditing(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_hyperlink_auditing(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_java(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_java(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_javascript(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_javascript(self.to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(feature = "v2_4")]
    fn set_enable_media_stream(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_media_stream(self.to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(feature = "v2_4")]
    fn set_enable_mediasource(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_mediasource(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_offline_web_application_cache(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_offline_web_application_cache(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_page_cache(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_page_cache(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_plugins(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_plugins(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_private_browsing(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_private_browsing(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_resizable_text_areas(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_resizable_text_areas(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_site_specific_quirks(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_site_specific_quirks(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_smooth_scrolling(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_smooth_scrolling(self.to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(feature = "v2_2")]
    fn set_enable_spatial_navigation(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_spatial_navigation(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_tabs_to_links(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_tabs_to_links(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_webaudio(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_webaudio(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_webgl(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_webgl(self.to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(feature = "v2_2")]
    fn set_enable_write_console_messages_to_stdout(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_write_console_messages_to_stdout(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_xss_auditor(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_enable_xss_auditor(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_fantasy_font_family(&self, fantasy_font_family: &str) {
        unsafe {
            ffi::webkit_settings_set_fantasy_font_family(self.to_glib_none().0, fantasy_font_family.to_glib_none().0);
        }
    }

    //#[cfg(feature = "v2_16")]
    //fn set_hardware_acceleration_policy(&self, policy: /*Ignored*/HardwareAccelerationPolicy) {
    //    unsafe { TODO: call ffi::webkit_settings_set_hardware_acceleration_policy() }
    //}

    fn set_javascript_can_access_clipboard(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_javascript_can_access_clipboard(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_javascript_can_open_windows_automatically(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_javascript_can_open_windows_automatically(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_load_icons_ignoring_image_load_setting(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_load_icons_ignoring_image_load_setting(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_media_playback_allows_inline(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_media_playback_allows_inline(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_media_playback_requires_user_gesture(&self, enabled: bool) {
        unsafe {
            ffi::webkit_settings_set_media_playback_requires_user_gesture(self.to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_minimum_font_size(&self, font_size: u32) {
        unsafe {
            ffi::webkit_settings_set_minimum_font_size(self.to_glib_none().0, font_size);
        }
    }

    fn set_monospace_font_family(&self, monospace_font_family: &str) {
        unsafe {
            ffi::webkit_settings_set_monospace_font_family(self.to_glib_none().0, monospace_font_family.to_glib_none().0);
        }
    }

    fn set_pictograph_font_family(&self, pictograph_font_family: &str) {
        unsafe {
            ffi::webkit_settings_set_pictograph_font_family(self.to_glib_none().0, pictograph_font_family.to_glib_none().0);
        }
    }

    fn set_print_backgrounds(&self, print_backgrounds: bool) {
        unsafe {
            ffi::webkit_settings_set_print_backgrounds(self.to_glib_none().0, print_backgrounds.to_glib());
        }
    }

    fn set_sans_serif_font_family(&self, sans_serif_font_family: &str) {
        unsafe {
            ffi::webkit_settings_set_sans_serif_font_family(self.to_glib_none().0, sans_serif_font_family.to_glib_none().0);
        }
    }

    fn set_serif_font_family(&self, serif_font_family: &str) {
        unsafe {
            ffi::webkit_settings_set_serif_font_family(self.to_glib_none().0, serif_font_family.to_glib_none().0);
        }
    }

    fn set_user_agent<'a, P: Into<Option<&'a str>>>(&self, user_agent: P) {
        let user_agent = user_agent.into();
        let user_agent = user_agent.to_glib_none();
        unsafe {
            ffi::webkit_settings_set_user_agent(self.to_glib_none().0, user_agent.0);
        }
    }

    fn set_user_agent_with_application_details<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>>(&self, application_name: P, application_version: Q) {
        let application_name = application_name.into();
        let application_name = application_name.to_glib_none();
        let application_version = application_version.into();
        let application_version = application_version.to_glib_none();
        unsafe {
            ffi::webkit_settings_set_user_agent_with_application_details(self.to_glib_none().0, application_name.0, application_version.0);
        }
    }

    fn set_zoom_text_only(&self, zoom_text_only: bool) {
        unsafe {
            ffi::webkit_settings_set_zoom_text_only(self.to_glib_none().0, zoom_text_only.to_glib());
        }
    }
}
