// This file was generated by gir (0f7cd61) from gir-files (0bcaef9)
// DO NOT EDIT

use ffi;
use glib;
#[cfg(feature = "v2_8")]
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(feature = "v2_8")]
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
#[cfg(feature = "v2_8")]
use std::boxed::Box as Box_;
use std::mem;
#[cfg(feature = "v2_8")]
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Notification(Object<ffi::WebKitNotification>);

    match fn {
        get_type => || ffi::webkit_notification_get_type(),
    }
}

pub trait NotificationExt {
    #[cfg(feature = "v2_12")]
    fn clicked(&self);

    #[cfg(feature = "v2_8")]
    fn close(&self);

    #[cfg(feature = "v2_8")]
    fn get_body(&self) -> Option<String>;

    #[cfg(feature = "v2_8")]
    fn get_id(&self) -> u64;

    #[cfg(feature = "v2_16")]
    fn get_tag(&self) -> Option<String>;

    #[cfg(feature = "v2_8")]
    fn get_title(&self) -> Option<String>;

    #[cfg(feature = "v2_12")]
    fn connect_clicked<F: Fn(&Self) + 'static>(&self, f: F) -> u64;

    #[cfg(feature = "v2_8")]
    fn connect_closed<F: Fn(&Self) + 'static>(&self, f: F) -> u64;
}

impl<O: IsA<Notification> + IsA<glib::object::Object>> NotificationExt for O {
    #[cfg(feature = "v2_12")]
    fn clicked(&self) {
        unsafe {
            ffi::webkit_notification_clicked(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_8")]
    fn close(&self) {
        unsafe {
            ffi::webkit_notification_close(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_8")]
    fn get_body(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_notification_get_body(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_8")]
    fn get_id(&self) -> u64 {
        unsafe {
            ffi::webkit_notification_get_id(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v2_16")]
    fn get_tag(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_notification_get_tag(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_8")]
    fn get_title(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_notification_get_title(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_12")]
    fn connect_clicked<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "clicked",
                transmute(clicked_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(feature = "v2_8")]
    fn connect_closed<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "closed",
                transmute(closed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(feature = "v2_12")]
unsafe extern "C" fn clicked_trampoline<P>(this: *mut ffi::WebKitNotification, f: glib_ffi::gpointer)
where P: IsA<Notification> {
    callback_guard!();
    let f: &Box_<Fn(&P) + 'static> = transmute(f);
    f(&Notification::from_glib_none(this).downcast_unchecked())
}

#[cfg(feature = "v2_8")]
unsafe extern "C" fn closed_trampoline<P>(this: *mut ffi::WebKitNotification, f: glib_ffi::gpointer)
where P: IsA<Notification> {
    callback_guard!();
    let f: &Box_<Fn(&P) + 'static> = transmute(f);
    f(&Notification::from_glib_none(this).downcast_unchecked())
}
