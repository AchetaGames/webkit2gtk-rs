// This file was generated by gir (e95e5d8) from gir-files (857b8f5)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct WindowProperties(Object<ffi::WebKitWindowProperties>);

    match fn {
        get_type => || ffi::webkit_window_properties_get_type(),
    }
}

pub trait WindowPropertiesExt {
    fn get_fullscreen(&self) -> bool;

    //fn get_geometry(&self, geometry: /*Ignored*/gdk::Rectangle);

    fn get_locationbar_visible(&self) -> bool;

    fn get_menubar_visible(&self) -> bool;

    fn get_resizable(&self) -> bool;

    fn get_scrollbars_visible(&self) -> bool;

    fn get_statusbar_visible(&self) -> bool;

    fn get_toolbar_visible(&self) -> bool;

    fn connect_property_fullscreen_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_geometry_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_locationbar_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_menubar_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_resizable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_scrollbars_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_statusbar_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_toolbar_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<WindowProperties> + IsA<glib::object::Object>> WindowPropertiesExt for O {
    fn get_fullscreen(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_window_properties_get_fullscreen(self.to_glib_none().0))
        }
    }

    //fn get_geometry(&self, geometry: /*Ignored*/gdk::Rectangle) {
    //    unsafe { TODO: call ffi::webkit_window_properties_get_geometry() }
    //}

    fn get_locationbar_visible(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_window_properties_get_locationbar_visible(self.to_glib_none().0))
        }
    }

    fn get_menubar_visible(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_window_properties_get_menubar_visible(self.to_glib_none().0))
        }
    }

    fn get_resizable(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_window_properties_get_resizable(self.to_glib_none().0))
        }
    }

    fn get_scrollbars_visible(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_window_properties_get_scrollbars_visible(self.to_glib_none().0))
        }
    }

    fn get_statusbar_visible(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_window_properties_get_statusbar_visible(self.to_glib_none().0))
        }
    }

    fn get_toolbar_visible(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_window_properties_get_toolbar_visible(self.to_glib_none().0))
        }
    }

    fn connect_property_fullscreen_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::fullscreen",
                transmute(notify_fullscreen_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_geometry_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::geometry",
                transmute(notify_geometry_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_locationbar_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::locationbar-visible",
                transmute(notify_locationbar_visible_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_menubar_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::menubar-visible",
                transmute(notify_menubar_visible_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_resizable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::resizable",
                transmute(notify_resizable_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_scrollbars_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::scrollbars-visible",
                transmute(notify_scrollbars_visible_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_statusbar_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::statusbar-visible",
                transmute(notify_statusbar_visible_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_toolbar_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::toolbar-visible",
                transmute(notify_toolbar_visible_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_fullscreen_trampoline<P>(this: *mut ffi::WebKitWindowProperties, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WindowProperties> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WindowProperties::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_geometry_trampoline<P>(this: *mut ffi::WebKitWindowProperties, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WindowProperties> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WindowProperties::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_locationbar_visible_trampoline<P>(this: *mut ffi::WebKitWindowProperties, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WindowProperties> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WindowProperties::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_menubar_visible_trampoline<P>(this: *mut ffi::WebKitWindowProperties, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WindowProperties> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WindowProperties::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_resizable_trampoline<P>(this: *mut ffi::WebKitWindowProperties, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WindowProperties> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WindowProperties::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_scrollbars_visible_trampoline<P>(this: *mut ffi::WebKitWindowProperties, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WindowProperties> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WindowProperties::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_statusbar_visible_trampoline<P>(this: *mut ffi::WebKitWindowProperties, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WindowProperties> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WindowProperties::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_toolbar_visible_trampoline<P>(this: *mut ffi::WebKitWindowProperties, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WindowProperties> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WindowProperties::from_glib_borrow(this).downcast_unchecked())
}
