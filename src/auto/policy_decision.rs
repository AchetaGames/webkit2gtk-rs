// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct PolicyDecision(Object<ffi::WebKitPolicyDecision, ffi::WebKitPolicyDecisionClass, PolicyDecisionClass>);

    match fn {
        get_type => || ffi::webkit_policy_decision_get_type(),
    }
}

pub const NONE_POLICY_DECISION: Option<&PolicyDecision> = None;

pub trait PolicyDecisionExt: 'static {
    fn download(&self);

    fn ignore(&self);

    fn use_(&self);
}

impl<O: IsA<PolicyDecision>> PolicyDecisionExt for O {
    fn download(&self) {
        unsafe {
            ffi::webkit_policy_decision_download(self.as_ref().to_glib_none().0);
        }
    }

    fn ignore(&self) {
        unsafe {
            ffi::webkit_policy_decision_ignore(self.as_ref().to_glib_none().0);
        }
    }

    fn use_(&self) {
        unsafe {
            ffi::webkit_policy_decision_use(self.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for PolicyDecision {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "PolicyDecision")
    }
}
