// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use glib::GString;
use glib::StaticType;
use glib::ToValue;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use glib_sys;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use gtk;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use gtk_sys;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use std::mem::transmute;
use webkit2_sys;

glib_wrapper! {
    pub struct PrintCustomWidget(Object<webkit2_sys::WebKitPrintCustomWidget, webkit2_sys::WebKitPrintCustomWidgetClass, PrintCustomWidgetClass>);

    match fn {
        get_type => || webkit2_sys::webkit_print_custom_widget_get_type(),
    }
}

impl PrintCustomWidget {
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    pub fn new<P: IsA<gtk::Widget>>(widget: &P, title: &str) -> PrintCustomWidget {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(webkit2_sys::webkit_print_custom_widget_new(
                widget.as_ref().to_glib_none().0,
                title.to_glib_none().0,
            ))
        }
    }
}

#[derive(Clone, Default)]
pub struct PrintCustomWidgetBuilder {
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    title: Option<String>,
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    widget: Option<gtk::Widget>,
}

impl PrintCustomWidgetBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn build(self) -> PrintCustomWidget {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        #[cfg(any(feature = "v2_16", feature = "dox"))]
        {
            if let Some(ref title) = self.title {
                properties.push(("title", title));
            }
        }
        #[cfg(any(feature = "v2_16", feature = "dox"))]
        {
            if let Some(ref widget) = self.widget {
                properties.push(("widget", widget));
            }
        }
        let ret = glib::Object::new(PrintCustomWidget::static_type(), &properties)
            .expect("object new")
            .downcast::<PrintCustomWidget>()
            .expect("downcast");
        ret
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    pub fn title(mut self, title: &str) -> Self {
        self.title = Some(title.to_string());
        self
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    pub fn widget<P: IsA<gtk::Widget>>(mut self, widget: &P) -> Self {
        self.widget = Some(widget.clone().upcast());
        self
    }
}

pub const NONE_PRINT_CUSTOM_WIDGET: Option<&PrintCustomWidget> = None;

pub trait PrintCustomWidgetExt: 'static {
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_title(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_widget(&self) -> Option<gtk::Widget>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn connect_apply<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn connect_update<F: Fn(&Self, &gtk::PageSetup, &gtk::PrintSettings) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<PrintCustomWidget>> PrintCustomWidgetExt for O {
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_title(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_print_custom_widget_get_title(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_widget(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_print_custom_widget_get_widget(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn connect_apply<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn apply_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut webkit2_sys::WebKitPrintCustomWidget,
            f: glib_sys::gpointer,
        ) where
            P: IsA<PrintCustomWidget>,
        {
            let f: &F = &*(f as *const F);
            f(&PrintCustomWidget::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"apply\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    apply_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn connect_update<F: Fn(&Self, &gtk::PageSetup, &gtk::PrintSettings) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn update_trampoline<
            P,
            F: Fn(&P, &gtk::PageSetup, &gtk::PrintSettings) + 'static,
        >(
            this: *mut webkit2_sys::WebKitPrintCustomWidget,
            page_setup: *mut gtk_sys::GtkPageSetup,
            print_settings: *mut gtk_sys::GtkPrintSettings,
            f: glib_sys::gpointer,
        ) where
            P: IsA<PrintCustomWidget>,
        {
            let f: &F = &*(f as *const F);
            f(
                &PrintCustomWidget::from_glib_borrow(this).unsafe_cast_ref(),
                &from_glib_borrow(page_setup),
                &from_glib_borrow(print_settings),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"update\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    update_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for PrintCustomWidget {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "PrintCustomWidget")
    }
}
