// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
#[cfg(any(feature = "v2_30", feature = "dox"))]
use glib::GString;
use std::fmt;
use webkit2_sys;
use PermissionRequest;

glib_wrapper! {
    pub struct WebsiteDataAccessPermissionRequest(Object<webkit2_sys::WebKitWebsiteDataAccessPermissionRequest, webkit2_sys::WebKitWebsiteDataAccessPermissionRequestClass, WebsiteDataAccessPermissionRequestClass>) @implements PermissionRequest;

    match fn {
        get_type => || webkit2_sys::webkit_website_data_access_permission_request_get_type(),
    }
}

pub const NONE_WEBSITE_DATA_ACCESS_PERMISSION_REQUEST: Option<&WebsiteDataAccessPermissionRequest> =
    None;

pub trait WebsiteDataAccessPermissionRequestExt: 'static {
    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_current_domain(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_requesting_domain(&self) -> Option<GString>;
}

impl<O: IsA<WebsiteDataAccessPermissionRequest>> WebsiteDataAccessPermissionRequestExt for O {
    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_current_domain(&self) -> Option<GString> {
        unsafe {
            from_glib_none(
                webkit2_sys::webkit_website_data_access_permission_request_get_current_domain(
                    self.as_ref().to_glib_none().0,
                ),
            )
        }
    }

    #[cfg(any(feature = "v2_30", feature = "dox"))]
    fn get_requesting_domain(&self) -> Option<GString> {
        unsafe {
            from_glib_none(
                webkit2_sys::webkit_website_data_access_permission_request_get_requesting_domain(
                    self.as_ref().to_glib_none().0,
                ),
            )
        }
    }
}

impl fmt::Display for WebsiteDataAccessPermissionRequest {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "WebsiteDataAccessPermissionRequest")
    }
}
