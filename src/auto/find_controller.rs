// This file was generated by gir (0f7cd61) from gir-files (0bcaef9)
// DO NOT EDIT

use WebView;
use ffi;
use glib;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct FindController(Object<ffi::WebKitFindController>);

    match fn {
        get_type => || ffi::webkit_find_controller_get_type(),
    }
}

pub trait FindControllerExt {
    fn count_matches(&self, search_text: &str, find_options: u32, max_match_count: u32);

    fn get_max_match_count(&self) -> u32;

    fn get_options(&self) -> u32;

    fn get_search_text(&self) -> Option<String>;

    fn get_web_view(&self) -> Option<WebView>;

    fn search(&self, search_text: &str, find_options: u32, max_match_count: u32);

    fn search_finish(&self);

    fn search_next(&self);

    fn search_previous(&self);

    fn get_property_text(&self) -> Option<String>;

    fn connect_counted_matches<F: Fn(&Self, u32) + 'static>(&self, f: F) -> u64;

    fn connect_failed_to_find_text<F: Fn(&Self) + 'static>(&self, f: F) -> u64;

    fn connect_found_text<F: Fn(&Self, u32) + 'static>(&self, f: F) -> u64;
}

impl<O: IsA<FindController> + IsA<glib::object::Object>> FindControllerExt for O {
    fn count_matches(&self, search_text: &str, find_options: u32, max_match_count: u32) {
        unsafe {
            ffi::webkit_find_controller_count_matches(self.to_glib_none().0, search_text.to_glib_none().0, find_options, max_match_count);
        }
    }

    fn get_max_match_count(&self) -> u32 {
        unsafe {
            ffi::webkit_find_controller_get_max_match_count(self.to_glib_none().0)
        }
    }

    fn get_options(&self) -> u32 {
        unsafe {
            ffi::webkit_find_controller_get_options(self.to_glib_none().0)
        }
    }

    fn get_search_text(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_find_controller_get_search_text(self.to_glib_none().0))
        }
    }

    fn get_web_view(&self) -> Option<WebView> {
        unsafe {
            from_glib_none(ffi::webkit_find_controller_get_web_view(self.to_glib_none().0))
        }
    }

    fn search(&self, search_text: &str, find_options: u32, max_match_count: u32) {
        unsafe {
            ffi::webkit_find_controller_search(self.to_glib_none().0, search_text.to_glib_none().0, find_options, max_match_count);
        }
    }

    fn search_finish(&self) {
        unsafe {
            ffi::webkit_find_controller_search_finish(self.to_glib_none().0);
        }
    }

    fn search_next(&self) {
        unsafe {
            ffi::webkit_find_controller_search_next(self.to_glib_none().0);
        }
    }

    fn search_previous(&self) {
        unsafe {
            ffi::webkit_find_controller_search_previous(self.to_glib_none().0);
        }
    }

    fn get_property_text(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "text".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn connect_counted_matches<F: Fn(&Self, u32) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self, u32) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "counted-matches",
                transmute(counted_matches_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_failed_to_find_text<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "failed-to-find-text",
                transmute(failed_to_find_text_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_found_text<F: Fn(&Self, u32) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self, u32) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "found-text",
                transmute(found_text_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn counted_matches_trampoline<P>(this: *mut ffi::WebKitFindController, match_count: libc::c_uint, f: glib_ffi::gpointer)
where P: IsA<FindController> {
    callback_guard!();
    let f: &Box_<Fn(&P, u32) + 'static> = transmute(f);
    f(&FindController::from_glib_none(this).downcast_unchecked(), match_count)
}

unsafe extern "C" fn failed_to_find_text_trampoline<P>(this: *mut ffi::WebKitFindController, f: glib_ffi::gpointer)
where P: IsA<FindController> {
    callback_guard!();
    let f: &Box_<Fn(&P) + 'static> = transmute(f);
    f(&FindController::from_glib_none(this).downcast_unchecked())
}

unsafe extern "C" fn found_text_trampoline<P>(this: *mut ffi::WebKitFindController, match_count: libc::c_uint, f: glib_ffi::gpointer)
where P: IsA<FindController> {
    callback_guard!();
    let f: &Box_<Fn(&P, u32) + 'static> = transmute(f);
    f(&FindController::from_glib_none(this).downcast_unchecked(), match_count)
}
