// This file was generated by gir (f00d658) from gir-files (1069259)
// DO NOT EDIT

use PolicyDecision;
use URIRequest;
use URIResponse;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct ResponsePolicyDecision(Object<ffi::WebKitResponsePolicyDecision>): PolicyDecision;

    match fn {
        get_type => || ffi::webkit_response_policy_decision_get_type(),
    }
}

pub trait ResponsePolicyDecisionExt {
    fn get_request(&self) -> Option<URIRequest>;

    fn get_response(&self) -> Option<URIResponse>;

    #[cfg(feature = "v2_4")]
    fn is_mime_type_supported(&self) -> bool;
}

impl<O: IsA<ResponsePolicyDecision>> ResponsePolicyDecisionExt for O {
    fn get_request(&self) -> Option<URIRequest> {
        unsafe {
            from_glib_none(ffi::webkit_response_policy_decision_get_request(self.to_glib_none().0))
        }
    }

    fn get_response(&self) -> Option<URIResponse> {
        unsafe {
            from_glib_none(ffi::webkit_response_policy_decision_get_response(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_4")]
    fn is_mime_type_supported(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_response_policy_decision_is_mime_type_supported(self.to_glib_none().0))
        }
    }
}
