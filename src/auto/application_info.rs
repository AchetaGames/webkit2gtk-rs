// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v2_18", feature = "dox"))]
use glib::translate::*;
#[cfg(any(feature = "v2_18", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v2_18", feature = "dox"))]
use std::mem;
use webkit2_sys;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct ApplicationInfo(Shared<webkit2_sys::WebKitApplicationInfo>);

    match fn {
        ref => |ptr| webkit2_sys::webkit_application_info_ref(ptr),
        unref => |ptr| webkit2_sys::webkit_application_info_unref(ptr),
        get_type => || webkit2_sys::webkit_application_info_get_type(),
    }
}

impl ApplicationInfo {
    #[cfg(any(feature = "v2_18", feature = "dox"))]
    pub fn new() -> ApplicationInfo {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(webkit2_sys::webkit_application_info_new())
        }
    }

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    pub fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_application_info_get_name(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    pub fn get_version(&self) -> (u64, u64, u64) {
        unsafe {
            let mut major = mem::MaybeUninit::uninit();
            let mut minor = mem::MaybeUninit::uninit();
            let mut micro = mem::MaybeUninit::uninit();
            webkit2_sys::webkit_application_info_get_version(self.to_glib_none().0, major.as_mut_ptr(), minor.as_mut_ptr(), micro.as_mut_ptr());
            let major = major.assume_init();
            let minor = minor.assume_init();
            let micro = micro.assume_init();
            (major, minor, micro)
        }
    }

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    pub fn set_name(&self, name: &str) {
        unsafe {
            webkit2_sys::webkit_application_info_set_name(self.to_glib_none().0, name.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    pub fn set_version(&self, major: u64, minor: u64, micro: u64) {
        unsafe {
            webkit2_sys::webkit_application_info_set_version(self.to_glib_none().0, major, minor, micro);
        }
    }
}

#[cfg(any(feature = "v2_18", feature = "dox"))]
impl Default for ApplicationInfo {
    fn default() -> Self {
        Self::new()
    }
}
