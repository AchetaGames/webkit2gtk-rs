// This file was generated by gir (0d368d6) from gir-files (???)
// DO NOT EDIT

use CookieManager;
use Download;
use FaviconDatabase;
use SecurityManager;
#[cfg(feature = "v2_10")]
use WebsiteDataManager;
use ffi;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct WebContext(Object<ffi::WebKitWebContext>);

    match fn {
        get_type => || ffi::webkit_web_context_get_type(),
    }
}

impl WebContext {
    #[cfg(feature = "v2_8")]
    pub fn new() -> WebContext {
        unsafe {
            from_glib_full(ffi::webkit_web_context_new())
        }
    }

    #[cfg(feature = "v2_10")]
    pub fn new_with_website_data_manager(manager: &WebsiteDataManager) -> WebContext {
        unsafe {
            from_glib_full(ffi::webkit_web_context_new_with_website_data_manager(manager.to_glib_none().0))
        }
    }

    //#[cfg(feature = "v2_6")]
    //pub fn allow_tls_certificate_for_host(&self, certificate: /*Ignored*/&gio::TlsCertificate, host: &str) {
    //    unsafe { TODO: call ffi::webkit_web_context_allow_tls_certificate_for_host() }
    //}

    pub fn clear_cache(&self) {
        unsafe {
            ffi::webkit_web_context_clear_cache(self.to_glib_none().0);
        }
    }

    pub fn download_uri(&self, uri: &str) -> Option<Download> {
        unsafe {
            from_glib_full(ffi::webkit_web_context_download_uri(self.to_glib_none().0, uri.to_glib_none().0))
        }
    }

    //pub fn get_cache_model(&self) -> /*Ignored*/CacheModel {
    //    unsafe { TODO: call ffi::webkit_web_context_get_cache_model() }
    //}

    pub fn get_cookie_manager(&self) -> Option<CookieManager> {
        unsafe {
            from_glib_none(ffi::webkit_web_context_get_cookie_manager(self.to_glib_none().0))
        }
    }

    pub fn get_favicon_database(&self) -> Option<FaviconDatabase> {
        unsafe {
            from_glib_none(ffi::webkit_web_context_get_favicon_database(self.to_glib_none().0))
        }
    }

    pub fn get_favicon_database_directory(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_web_context_get_favicon_database_directory(self.to_glib_none().0))
        }
    }

    //pub fn get_plugins(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call ffi::webkit_web_context_get_plugins() }
    //}

    //pub fn get_plugins_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T, error: /*Ignored*/Option<Error>) -> Vec<Plugin> {
    //    unsafe { TODO: call ffi::webkit_web_context_get_plugins_finish() }
    //}

    //#[cfg(feature = "v2_4")]
    //pub fn get_process_model(&self) -> /*Ignored*/ProcessModel {
    //    unsafe { TODO: call ffi::webkit_web_context_get_process_model() }
    //}

    pub fn get_security_manager(&self) -> Option<SecurityManager> {
        unsafe {
            from_glib_none(ffi::webkit_web_context_get_security_manager(self.to_glib_none().0))
        }
    }

    pub fn get_spell_checking_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_web_context_get_spell_checking_enabled(self.to_glib_none().0))
        }
    }

    pub fn get_spell_checking_languages(&self) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::webkit_web_context_get_spell_checking_languages(self.to_glib_none().0))
        }
    }

    //pub fn get_tls_errors_policy(&self) -> /*Ignored*/TLSErrorsPolicy {
    //    unsafe { TODO: call ffi::webkit_web_context_get_tls_errors_policy() }
    //}

    #[cfg(feature = "v2_10")]
    pub fn get_web_process_count_limit(&self) -> u32 {
        unsafe {
            ffi::webkit_web_context_get_web_process_count_limit(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v2_10")]
    pub fn get_website_data_manager(&self) -> Option<WebsiteDataManager> {
        unsafe {
            from_glib_none(ffi::webkit_web_context_get_website_data_manager(self.to_glib_none().0))
        }
    }

    pub fn prefetch_dns(&self, hostname: &str) {
        unsafe {
            ffi::webkit_web_context_prefetch_dns(self.to_glib_none().0, hostname.to_glib_none().0);
        }
    }

    //pub fn register_uri_scheme(&self, scheme: &str, callback: /*Unknown conversion*//*Unimplemented*/URISchemeRequestCallback, user_data: /*Unimplemented*/Option<Fundamental: Pointer>, user_data_destroy_func: /*Unknown conversion*//*Unimplemented*/DestroyNotify) {
    //    unsafe { TODO: call ffi::webkit_web_context_register_uri_scheme() }
    //}

    pub fn set_additional_plugins_directory(&self, directory: &str) {
        unsafe {
            ffi::webkit_web_context_set_additional_plugins_directory(self.to_glib_none().0, directory.to_glib_none().0);
        }
    }

    //pub fn set_cache_model(&self, cache_model: /*Ignored*/CacheModel) {
    //    unsafe { TODO: call ffi::webkit_web_context_set_cache_model() }
    //}

    pub fn set_disk_cache_directory(&self, directory: &str) {
        unsafe {
            ffi::webkit_web_context_set_disk_cache_directory(self.to_glib_none().0, directory.to_glib_none().0);
        }
    }

    pub fn set_favicon_database_directory(&self, path: Option<&str>) {
        unsafe {
            ffi::webkit_web_context_set_favicon_database_directory(self.to_glib_none().0, path.to_glib_none().0);
        }
    }

    pub fn set_preferred_languages(&self, languages: &[&str]) {
        unsafe {
            ffi::webkit_web_context_set_preferred_languages(self.to_glib_none().0, languages.to_glib_none().0);
        }
    }

    //#[cfg(feature = "v2_4")]
    //pub fn set_process_model(&self, process_model: /*Ignored*/ProcessModel) {
    //    unsafe { TODO: call ffi::webkit_web_context_set_process_model() }
    //}

    pub fn set_spell_checking_enabled(&self, enabled: bool) {
        unsafe {
            ffi::webkit_web_context_set_spell_checking_enabled(self.to_glib_none().0, enabled.to_glib());
        }
    }

    pub fn set_spell_checking_languages(&self, languages: &[&str]) {
        unsafe {
            ffi::webkit_web_context_set_spell_checking_languages(self.to_glib_none().0, languages.to_glib_none().0);
        }
    }

    //pub fn set_tls_errors_policy(&self, policy: /*Ignored*/TLSErrorsPolicy) {
    //    unsafe { TODO: call ffi::webkit_web_context_set_tls_errors_policy() }
    //}

    pub fn set_web_extensions_directory(&self, directory: &str) {
        unsafe {
            ffi::webkit_web_context_set_web_extensions_directory(self.to_glib_none().0, directory.to_glib_none().0);
        }
    }

    //#[cfg(feature = "v2_4")]
    //pub fn set_web_extensions_initialization_user_data(&self, user_data: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi::webkit_web_context_set_web_extensions_initialization_user_data() }
    //}

    #[cfg(feature = "v2_10")]
    pub fn set_web_process_count_limit(&self, limit: u32) {
        unsafe {
            ffi::webkit_web_context_set_web_process_count_limit(self.to_glib_none().0, limit);
        }
    }

    pub fn get_default() -> Option<WebContext> {
        unsafe {
            from_glib_none(ffi::webkit_web_context_get_default())
        }
    }

    pub fn connect_download_started<F: Fn(&WebContext, &Download) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&WebContext, &Download) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "download-started",
                transmute(download_started_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(feature = "v2_4")]
    pub fn connect_initialize_web_extensions<F: Fn(&WebContext) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&WebContext) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "initialize-web-extensions",
                transmute(initialize_web_extensions_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn download_started_trampoline(this: *mut ffi::WebKitWebContext, download: *mut ffi::WebKitDownload, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&WebContext, &Download) + 'static> = transmute(f);
    f(&from_glib_none(this), &from_glib_none(download))
}

#[cfg(feature = "v2_4")]
unsafe extern "C" fn initialize_web_extensions_trampoline(this: *mut ffi::WebKitWebContext, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&WebContext) + 'static> = transmute(f);
    f(&from_glib_none(this))
}
