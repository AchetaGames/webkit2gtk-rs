// This file was generated by gir (0f7cd61) from gir-files (0bcaef9)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct WebInspector(Object<ffi::WebKitWebInspector>);

    match fn {
        get_type => || ffi::webkit_web_inspector_get_type(),
    }
}

pub trait WebInspectorExt {
    fn attach(&self);

    fn close(&self);

    fn detach(&self);

    fn get_attached_height(&self) -> u32;

    #[cfg(feature = "v2_8")]
    fn get_can_attach(&self) -> bool;

    fn get_inspected_uri(&self) -> Option<String>;

    //fn get_web_view(&self) -> /*Ignored*/Option<WebViewBase>;

    fn is_attached(&self) -> bool;

    fn show(&self);

    fn connect_attach<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> u64;

    fn connect_bring_to_front<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> u64;

    fn connect_closed<F: Fn(&Self) + 'static>(&self, f: F) -> u64;

    fn connect_detach<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> u64;

    fn connect_open_window<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> u64;
}

impl<O: IsA<WebInspector> + IsA<glib::object::Object>> WebInspectorExt for O {
    fn attach(&self) {
        unsafe {
            ffi::webkit_web_inspector_attach(self.to_glib_none().0);
        }
    }

    fn close(&self) {
        unsafe {
            ffi::webkit_web_inspector_close(self.to_glib_none().0);
        }
    }

    fn detach(&self) {
        unsafe {
            ffi::webkit_web_inspector_detach(self.to_glib_none().0);
        }
    }

    fn get_attached_height(&self) -> u32 {
        unsafe {
            ffi::webkit_web_inspector_get_attached_height(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v2_8")]
    fn get_can_attach(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_web_inspector_get_can_attach(self.to_glib_none().0))
        }
    }

    fn get_inspected_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_web_inspector_get_inspected_uri(self.to_glib_none().0))
        }
    }

    //fn get_web_view(&self) -> /*Ignored*/Option<WebViewBase> {
    //    unsafe { TODO: call ffi::webkit_web_inspector_get_web_view() }
    //}

    fn is_attached(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_web_inspector_is_attached(self.to_glib_none().0))
        }
    }

    fn show(&self) {
        unsafe {
            ffi::webkit_web_inspector_show(self.to_glib_none().0);
        }
    }

    fn connect_attach<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "attach",
                transmute(attach_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_bring_to_front<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "bring-to-front",
                transmute(bring_to_front_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_closed<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "closed",
                transmute(closed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_detach<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "detach",
                transmute(detach_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_open_window<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "open-window",
                transmute(open_window_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn attach_trampoline<P>(this: *mut ffi::WebKitWebInspector, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebInspector> {
    callback_guard!();
    let f: &Box_<Fn(&P) -> bool + 'static> = transmute(f);
    f(&WebInspector::from_glib_none(this).downcast_unchecked()).to_glib()
}

unsafe extern "C" fn bring_to_front_trampoline<P>(this: *mut ffi::WebKitWebInspector, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebInspector> {
    callback_guard!();
    let f: &Box_<Fn(&P) -> bool + 'static> = transmute(f);
    f(&WebInspector::from_glib_none(this).downcast_unchecked()).to_glib()
}

unsafe extern "C" fn closed_trampoline<P>(this: *mut ffi::WebKitWebInspector, f: glib_ffi::gpointer)
where P: IsA<WebInspector> {
    callback_guard!();
    let f: &Box_<Fn(&P) + 'static> = transmute(f);
    f(&WebInspector::from_glib_none(this).downcast_unchecked())
}

unsafe extern "C" fn detach_trampoline<P>(this: *mut ffi::WebKitWebInspector, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebInspector> {
    callback_guard!();
    let f: &Box_<Fn(&P) -> bool + 'static> = transmute(f);
    f(&WebInspector::from_glib_none(this).downcast_unchecked()).to_glib()
}

unsafe extern "C" fn open_window_trampoline<P>(this: *mut ffi::WebKitWebInspector, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebInspector> {
    callback_guard!();
    let f: &Box_<Fn(&P) -> bool + 'static> = transmute(f);
    f(&WebInspector::from_glib_none(this).downcast_unchecked()).to_glib()
}
